/*
 * Superset
 * Superset
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package zk_os.sec;

import mpu.core.ARG;
import mpt.IaUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import utl_rest.StatusException;
import zk_os.db.net.WebUsr;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

public class ZAuth extends AbstractAuthenticationToken {

	public static final Logger L = LoggerFactory.getLogger(ZAuth.class);

	private final WebUsr usr;

	public WebUsr webUsr() {
		return usr;
	}

	public ZAuth(WebUsr usr, Collection<? extends GrantedAuthority> authorities) {
		super(authorities);
		this.usr = usr;
	}

	public static ZAuth get(ZAuth... defRq) {
		SecurityContext ctx = SecurityContextHolder.getContext();
		Authentication authentication = ctx.getAuthentication();
		if (authentication != null) {
			if (authentication instanceof ZAuth) {
				return (ZAuth) authentication;
			}
		}
		return Sec.returnDefOrThrow(defRq);
	}

	public static ZAuth author(ROLE... roles) {
		ZAuth tsmAuth = get();
		if (tsmAuth != null) {
			for (ROLE role : roles) {
				if (role.hasGaRole(tsmAuth)) {
					return tsmAuth;
				}
			}
		}
		throw StatusException.CODE(HttpStatus.FORBIDDEN);
	}

	public static ZAuth of(WebUsr usr) {
		List<String> roles = usr.getRolesList();
		Collection<GrantedAuthority> gaRoles = roles.stream().map(ROLE::toGaRole).collect(Collectors.toList());
		return new ZAuth(usr, gaRoles);
	}

	public static WebUsr getUsr(WebUsr... defRq) {
		ZAuth tsmAuth = get(null);
		if (tsmAuth != null) {
			return (WebUsr) tsmAuth.getPrincipal();
		}
		return ARG.toDefThrow("Auth is null", defRq);
	}

//	public static BeaAuth loadByUsr(long sid) {
//		BeaAuth tsmAuth = BeaAuth.of(WebUsr.byId(sid));
//		SecurityContextHolder.getContext().setAuthentication(tsmAuth);
//		return tsmAuth;
//	}

	public static ZAuth fake(long sid, String name) {
		return Sec.setAuthByUserSid(sid, name);
	}

	public IaUser usr() {
		return usr;
	}

	@Override
	public Object getPrincipal() {
//		return US.joinNL(getAuthorities());
		return usr;
	}

	@Override
	public Object getCredentials() {
		return null;
	}


}